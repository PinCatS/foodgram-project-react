name: Foodgram workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r ./backend/requirements.txt

    - name: Test with flake8
      run: |
        python -m flake8 . --import-order-style pep8

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_PASSWORD }} 
      - name: Push to Docker Hub
        uses: docker/build-push-action@v3
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram-backend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/foodgram-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/foodgram-backend:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if: github.ref == 'refs/heads/master'
    steps:
    - name: executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        context: ./foodgram-project/infra/
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        script: |
          touch .env
          echo DB_ENGINE=${{ secrets.DB_ENGINE }} > .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .env
          echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .env
          echo DJANGO_CSRF_TRUSTED_ORIGINS=${{ secrets.DJANGO_CSRF_TRUSTED_ORIGINS }} >> .env
          echo DJANGO_CORS_ALLOWED_ORIGINS=${{ secrets.DJANGO_CORS_ALLOWED_ORIGINS }} >> .env
          echo DJANGO_MEDIA_ORIGIN=${{ secrets.DJANGO_MEDIA_ORIGIN }} >> .env
          sudo docker compose stop
          sudo docker compose up -d --build

  collect_static_and_migrate_data:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/master'
    steps:
        - name: executing remote ssh commands to migrate project data
          uses: appleboy/ssh-action@master
          with:
            context: ./foodgram-project/infra/
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USER }}
            key: ${{ secrets.SSH_KEY }}
            passphrase: ${{ secrets.PASSPHRASE }}
            script: |
              sudo docker compose exec -it backend python3 manage.py collectstatic --noinput
              sudo docker compose exec -it backend python3 manage.py migrate
              sudo docker compose exec -it backend python3 manage.py importdata

  send_message:
    runs-on: ubuntu-latest
    needs: collect_static_and_migrate_data
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!
